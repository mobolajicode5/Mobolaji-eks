name: Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "destroy" to confirm'
        required: true
        default: ''

env:
  AWS_REGION: us-west-2
  TERRAFORM_DIR: terraform/eks/minimal

jobs:
  destroy:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'destroy'
    
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_DIR }}
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Terraform Init
      run: terraform init
    
    - name: Create S3 Bucket and DynamoDB Table
      run: |
        aws s3 mb s3://innovatemart-terraform-state --region eu-west-1 || true
        aws s3api put-bucket-versioning --bucket innovatemart-terraform-state --versioning-configuration Status=Enabled || true
        aws dynamodb create-table --table-name terraform-state-lock --attribute-definitions AttributeName=LockID,AttributeType=S --key-schema AttributeName=LockID,KeyType=HASH --billing-mode PAY_PER_REQUEST --region eu-west-1 || true
        sleep 10
    
    - name: Configure kubectl
      working-directory: ${{ env.TERRAFORM_DIR }}
      run: |
        rm -rf .terraform .terraform.lock.hcl || true
        terraform init
        KUBECTL_CMD=$(terraform output -raw configure_kubectl)
        eval $KUBECTL_CMD
    
    - name: Delete Application
      run: |
        kubectl delete -f https://github.com/aws-containers/retail-store-sample-app/releases/latest/download/kubernetes.yaml --validate=false || true
        kubectl delete svc --all --all-namespaces || true
        kubectl delete pvc --all --all-namespaces || true
        sleep 120
    
    - name: Force Delete LoadBalancers
      run: |
        aws elbv2 describe-load-balancers --region eu-west-1 --query 'LoadBalancers[?VpcId==`vpc-0af59270053cd4078`].LoadBalancerArn' --output text | xargs -I {} aws elbv2 delete-load-balancer --load-balancer-arn {} --region eu-west-1 || true
        aws elb describe-load-balancers --region eu-west-1 --query 'LoadBalancerDescriptions[?VPCId==`vpc-0af59270053cd4078`].LoadBalancerName' --output text | xargs -I {} aws elb delete-load-balancer --load-balancer-name {} --region eu-west-1 || true
        sleep 60
    
    - name: Force Delete ENIs and Elastic IPs
      run: |
        aws ec2 describe-network-interfaces --region eu-west-1 --filters "Name=vpc-id,Values=vpc-0af59270053cd4078" --query 'NetworkInterfaces[].NetworkInterfaceId' --output text | xargs -I {} aws ec2 delete-network-interface --network-interface-id {} --region eu-west-1 || true
        aws ec2 describe-addresses --region eu-west-1 --query 'Addresses[?Domain==`vpc`].AllocationId' --output text | xargs -I {} aws ec2 release-address --allocation-id {} --region eu-west-1 || true
        sleep 60
    
    - name: Terraform Destroy
      working-directory: ${{ env.TERRAFORM_DIR }}
      run: terraform destroy -auto-approve -var="environment_name=innovatemart"
    
    - name: Cleanup S3 Bucket and DynamoDB Table
      run: |
        aws s3api delete-objects --bucket innovatemart-terraform-state --delete "$(aws s3api list-object-versions --bucket innovatemart-terraform-state --query '{Objects: Versions[].{Key:Key,VersionId:VersionId}}')" || true
        aws s3api delete-objects --bucket innovatemart-terraform-state --delete "$(aws s3api list-object-versions --bucket innovatemart-terraform-state --query '{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}')" || true
        aws s3 rb s3://innovatemart-terraform-state --force || true
        aws dynamodb delete-table --table-name terraform-state-lock --region eu-west-1 || true